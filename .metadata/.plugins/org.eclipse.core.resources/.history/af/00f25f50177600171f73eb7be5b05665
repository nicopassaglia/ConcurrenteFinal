package Monitor;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Semaphore;

import Extra.Matriz;

public class Tiempo {
	
	private ArrayList<Date> alfas = new ArrayList<>();
	private ArrayList<Date> betas = new ArrayList<>();
	private ArrayList<Date> sensibilizacion = new ArrayList<>();
	private Matriz esperando;
	private Semaphore mutex;
	
	public Tiempo(int cantTransiciones, Semaphore mutex){
		esperando = new Matriz(cantTransiciones,1);
		esperando.productoPorEscalar(0);
		this.mutex = mutex;
		parseTxtFileTiempo();
		
		for(int i=0;i<cantTransiciones;i++){
			
				sensibilizacion.add(i,new Date(System.currentTimeMillis()));
			
		}
	
	}
	
	public int estaSensibilizado(int transicion){
		long alfa = alfas.get(transicion).getTime();
		long ahora = System.currentTimeMillis();
		long timeStamp = sensibilizacion.get(transicion).getTime();
		if(testVentanaTiempo(transicion)){
			if(estaEsperando(transicion)){
				return 0;
			}else{
				//setNuevoTimeStamp(null); //PASAR MATRIZ..NULL ESTA MAL
				return 1;
				
			}
		}else{
			
			if(antesVentana(transicion)){
				mutex.release();
				setEsperando(transicion);
				try {
					synchronized(this){
					System.out.println("Estoy antes de la ventana..tengo sueño me voy a dormir zzzz");
					wait(timeStamp+alfa-ahora);
					resetEsperando(transicion);
					}
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return 2; ///REVISAR ESTO..CREO QUE ES RESUME AND EXIT.
			}else{
				return 0;
			}
		}
	}
	
	public void setNow(Date date){
		date.setTime(System.currentTimeMillis());
	}
	
	public void setNuevoTimeStamp(Matriz nuevasSensi){
		
		for(int i=0;i<nuevasSensi.getFilCount();i++){
			if(nuevasSensi.getVal(i, 0) == 1){
				setNow(sensibilizacion.get(i));
			}
		}
	}
	
	
	public boolean testVentanaTiempo(int transicion){
		long ahora = System.currentTimeMillis();
		long timeStamp = sensibilizacion.get(transicion).getTime();
		
		if(ahora - timeStamp < betas.get(transicion).getTime() && ahora-timeStamp > alfas.get(transicion).getTime())
			return true;
		
		return false;
	}
	
	public boolean antesVentana(int transicion){
		long ahora = System.currentTimeMillis();
		long timeStamp = sensibilizacion.get(transicion).getTime();
		
		if(ahora - timeStamp < alfas.get(transicion).getTime()){
			setEsperando(transicion);
			return true;
		}
			
		
		return false;
	}
	
	public void setEsperando(int transicion){
		esperando.setDato(transicion, 0, 1);
	}
	
	public boolean estaEsperando(int transicion){
		if(esperando.getVal(transicion, 0) == 1){
			return true;
		}else{
			return false;
		}
	}
	
	public void resetEsperando(int transicion){
		esperando.setDato(transicion, 0, 0);
	}
	
	public void parseTxtFileTiempo(){
		int max = 20;
		FileReader input;
		int[][] trans= new int[max][max];
		List<Integer> vector = new ArrayList<>();
		List<Matriz> matrices = new ArrayList<>();
		String nombreArchivo = "tiempo";

		try {

			input = new FileReader("src/Monitor/"+nombreArchivo+".txt");
			BufferedReader bufRead = new BufferedReader(input);
			String myLine = null;
			int pos = 0;



			while ( (myLine = bufRead.readLine()) != null)
			{    
				int k = 0;

				String[] datos = myLine.split("\n");



				while(k < datos.length ){


					
					String[] valores = datos[k].split(" ");
					Date fechaAlfa = new Date();
					fechaAlfa.setTime(Integer.parseInt(valores[1]));
					this.alfas.add(k, fechaAlfa);
					
					Date fechaBeta = new Date();
					fechaBeta.setYear(8099);
					this.betas.add(k,fechaBeta);					
					k++;

				}



		
			}







		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}



		
	}
	}


